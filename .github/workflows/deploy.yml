name: Deploy Lambda Container

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: your-lambda-api
  LAMBDA_FUNCTION: your-lambda-api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update Lambda function
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION }} \
            --image-uri ${{ env.IMAGE_URI }} \
            --no-cli-pager

      - name: Wait for Lambda update
        run: |
          echo "Waiting for Lambda function to update..."
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION }}
          echo "Lambda function updated successfully!"

      - name: Test Lambda function
        run: |
          echo "Testing Lambda function..."
          RESPONSE=$(aws lambda invoke \
            --function-name ${{ env.LAMBDA_FUNCTION }} \
            --payload '{"path": "/hello", "httpMethod": "GET"}' \
            --cli-binary-format raw-in-base64-out \
            response.json \
            --no-cli-pager)
          
          echo "Lambda response:"
          cat response.json
          
          if grep -q "hello world" response.json; then
            echo "✅ Deployment test passed!"
          else
            echo "❌ Deployment test failed!"
            exit 1
          fi